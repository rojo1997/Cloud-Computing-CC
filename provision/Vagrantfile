# A continuación se muestra toda la configuración necesaria para la creación
# y provisionamiento de la VM empleando Vagrant. El valor '2' hace referencia 
# la versión de configuración que empleará Vagrant, que puede ser establecida
# a '1' o '2'. En nuestro caso hemos seleccionado la versión '2', ya que es la
# más reciente y que recomiendan por defecto.
Vagrant.configure("2") do |config|

  # Cada entorno de desarrollo de vagrant requiere de un denominado
  # 'box', que hace referencia al sistema o imagen base que se empleará
  # para la máquina virtual creada. En nuestro caso hemos seleccionado
  # la imagen oficial de Ubuntu LTS 18 (Bionic Beaver), que podemos 
  # encontrar en los repositorios de boxes de vagrant.
  # https://app.vagrantup.com/ubuntu/boxes/bionic64
  config.vm.box = "ubuntu/bionic64"

  # Con las siguientes opciones redirigimos los puertos de 
  # la máquina anfitriona a la máquina virtual. En nuestro caso
  # estamos redireccionando a los mismos puertos en los que tenemos
  # configurado los micro-servicio para poder acceder a ellos
  # de igual forma desde el navegador 'localhost:8080/...'
  config.vm.network "forwarded_port", guest: 8080, host: 8080 # MS Gestión de productos
  config.vm.network "forwarded_port", guest: 8000, host: 8000 # MS Análisis de recetas


  # Vagrant ofrece la posibilidad de emplear varios proveedores
  # y de configurarlos a nuestro gusto según una serie de parámetros.
  # En nuestro caso, empleamos virtualbox, estableciendo la capacidad de
  # memoria RAM a 6GB y 4 cores. Tener en consideración las capacidades de 
  # la máquina anfitriona a la hora de establecer las de la VM.
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "6144" 
    vb.cpus = "4"
  end
 

  # Vagrant ofrece la posibilidad de provisionar las VMs creadas empleando
  # Puppet, Chef, Ansible, Salt, y Docker entre otros. En nuestro caso hemos
  # empleado ansible, usando los playbooks definidos, que se ejecutarán
  # indicando el playbook a 'ansible.playbook'. En este caso, para respetar 
  # la modularidad del provisionamiento para los diversos micro-servicios,
  # hemos creado varios playbooks con el objetivo de respetar este principio.
  # Este primero contiene los recursos comunes necesarios para ambos MSs.
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "playbook_provision_common.yml"
  end

  # Los dos playbooks siguientes nos permiten provisionar las máquinas
  # con los recursos necesarios para cada micro-servicio de manera modular.
  # Provisionamiento para gestión de productos.
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "playbook_provision_gp.yml"
  end

  # Provisionamiento para análisis de recetas.
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "playbook_provision_ar.yml"
  end

  # Vagrant permite definir varios niveles objetivo empleando
  # 'define'. En este caso, para aseguramos que el despliegue
  # se realizará siempre tras la ejecución de los playbooks anteriores
  # ya que primero se ejecutarán los del nivel superior.
  # Dentro de esta definición, volvemos a emplear ansible pasándole
  # el playbook definido para el despliegue del servicio.
  config.vm.define "deploy" do |deploy|
    deploy.vm.provision :ansible do |ansible|
      ansible.playbook = "playbook_deploy.yml"
    end
  end

end
