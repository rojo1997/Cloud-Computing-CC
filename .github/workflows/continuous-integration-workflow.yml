# Nombre asignado al workflow
name: Test with gitHub Actions
# Se ejecutará el workflow cuando se realice un push
on: [push]

jobs:
  build:
    # Se ejecutaŕa en el so linux
    runs-on: ubuntu-latest
    # Ejecutaremos los test para la versiones especificadas
    strategy:
      matrix:
        #Especificamos las versiones de node
        node: [8.16.2]

    steps:
      # Es necesario clonar el código del repositorio para ejecutar
      # los test y al usar integración continua, por lo que debemos de
      # incluir la acción standar checkout antes que otras acciones.
      # Al usar v1 nos aseguramos de que estamos usando una versión
      # estable de checkout action.
      - uses: actions/checkout@v1

      # Establecemos las versiones indicadas en matrix
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      # Instalamos las dependencias necesarias
      - name: Install Dependencies
        run: npm install

      # Ejecutamos los tests
      #Previamente establecemos las variables de entorno definidas en la sección 'secrets' de github
      #para hacer uso de ellas en el test del micro-servicio. Para ello deberemos de emplear la etiqueta
      #'env', junto a la asignación y definición de las variables de entorno deseadas, previo a ejecutar
      #el comando 'run' que hará uso de éstas, al necesitarlas para ejecutar los tests.
      - name: Run tests
        env:
          PORT: ${{ secrets.PORT }}
          DB: ${{ secrets.DB }}
        run: npm test
      
      #Publicamos la imagen Docker construida a partir del repositorio
      #empleando la acción mostrada en la asignatura y que puede ser
      #consultada en el repositorio https://github.com/JJ/gpr-docker-publish.
      #Se ha empleado la de JJ, en lugar de la especificada en la rama forkeada
      #https://github.com/machine-learning-apps/gpr-docker-publish ya que nos
      #presenta un error al contener un nombre de repositorio con mayúsculas,
      #debiendo ser todo minúscula para evitarlo, como cuando se realiza manualmente.
      - name: Publish Docker Image to GPR
        uses: JJ/gpr-docker-publish@master
        with:
          #Especificamos el nombre del contenedor, el TAG asociado a la imagen,
          #la ruta del fichero para la construcción del contenedor Dockerfile,
          #y el contexto en el que se construirá la imagen.
          IMAGE_NAME: 'cc_refood_gestiondeproductos'
          DOCKERFILE_PATH: 'Dockerfile'
          BUILD_CONTEXT: '.'
        env:
          #Necesitaremos dar permiso para publicar en github packages,
          #al igual que hacemos cuando lo publicamos de forma manual,
          #por lo que indicaremos el token de autorización de GitHub
          #como variable de entorno.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TAG: latest